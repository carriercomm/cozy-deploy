#!/bin/bash

# Stop the script at any command returning status > 0
set -e

# Debug mode (uncomment to activate)
#set -x


# Color messages if run in a TTY
if [ -t 1 ]; then
    cyan='\e[0;36m'
    green='\e[0;32m'
    red='\e[0;31m'
    white='\e[0m'
else
    cyan='\e[0m'
    green='\e[0m'
    red='\e[0m'
    white='\e[0m'
fi


# Helpers to display messages
_alert () {
    echo -e "${red}$@${white}" 1>&2
}

_success () {
    echo -e "${green}$@${white}"
}

_notice () {
    echo -e "${cyan}$@${white}"
}


# Ensure that the script is running as superuser
if [ "$(id -u)" != "0" ]; then
   _alert "This script must be run as root"
   exit 1
fi


# Check that the domain name is valid
if [ ! -z "$2" ]; then
    COZY=$2
    if [[ ! $COZY =~ ^.*\.[a-zA-Z]{2,}$ ]]; then
        _alert "You must provide a valid domain name (e.g. $(basename $0) $1 mycozy.org)"
        exit 1
    fi

    set +e && docker ps -a | grep -q $COZY
    if [ $? -eq 0 ]; then
        COZY_EXISTS=true
    else
        COZY_EXISTS=false
    fi
    set -e
fi


INVALID_COZY_MSG="You must provide a Cozy domain name (e.g. $(basename $0) $1 mycozy.org)"


# Check if pagekite is configured
if [ -f ~/.pagekite.rc ]; then
    PAGEKITE=true
else
    PAGEKITE=false
fi


case "$1" in
  pull)
    docker pull cozy/full
    ;;


  build)
    _notice "Building image from the official repository: https://github.com/cozy-labs/cozy-docker"
    docker build -t cozy/full github.com/cozy-labs/cozy-docker
    ;;


  init)
    mkdir -p /etc/cozy-deploy/{ssl,vhosts}
    mkdir -p /var/cozy-deploy/{databases,configurations,backups,apps,modules}
    chmod -R 600 /var/cozy-deploy/configurations
    chmod -R 600 /var/cozy-deploy/configurations
    echo "49001" > /etc/cozy-deploy/last-port-used
    mkdir -p /etc/nginx/conf.d
    echo "include /etc/cozy-deploy/vhosts/*;" > /etc/nginx/conf.d/cozy-deploy.conf
    openssl dhparam -out /etc/cozy-deploy/ssl/dh2048.pem -outform PEM -2 2048
    service nginx restart 2>/dev/null \
    || _alert "Please restart nginx manually"
    ;;


    init-pagekite)
    # Download PageKite executable
    wget -qO- https://pagekite.net/pk/pagekite.py > /usr/local/bin/pagekite.py
    chmod +x /usr/local/bin/pagekite.py

    # Configure /root/.pagekite.rc
    if [ "$PAGEKITE" == "true" ]; then
        _alert "PageKite is already configured, delete ~/.pagekite.rc if you want to be able to configure it again"
        exit 1
    fi
    _notice "You are about to configure PageKite, a service that enables you to open your Cozies to the Internet easily.
You need to register on https://pagekite.net/signup/ first, then find your Kite Secret on https://pagekite.net/home/?#show_account_details.

Please indicate those details below.
"
    read -e -p "Your Kite (xxxx.pagekite.me): " ACCOUNT
    read -e -p "Your Kite Secret (e.g. 89d49k4zck26x7b427k8x79a9bd3ex9a): " SECRET
    cat <<EOF > /root/.pagekite.rc
kitename   = $ACCOUNT
kitesecret = $SECRET
defaults
savefile = /root/.pagekite.rc
EOF

    _success "
Your PageKite account has been properly configured.
Try deploying a Cozy on cozy-$ACCOUNT :-)

Pro tip: xxx-$ACCOUNT will be deployed in HTTPS
         xxx.$ACCOUNT will be deployed in HTTP"
    ;;


  restart-pagekite)
    if [[ $PAGEKITE = "true" ]]; then
        _notice "Restarting PageKite..."
        if [ "$(pgrep pagekite.py)" ]; then
            killall pagekite.py
        fi
        pagekite.py --daemonize
    else
        _alert "PageKite is not configured yet. Please run 'cozy-deploy init-pagekite' first."
    fi
    ;;


  update-image)
    _notice "Updating cozy base image: cozy/full"
    docker pull cozy/full
    _notice "Updating cozy-deploy executable"
    wget -qO- https://raw.github.com/cozy-labs/cozy-deploy/master/cozy-deploy > $(readlink -f $0)
    ;;


  update)
    if [ -z "$COZY" ]; then
        _alert "$INVALID_COZY_MSG"
        exit 1
    fi

    _notice "Updating system and applications on $COZY"
    docker exec $COZY cozy-monitor update-cozy-stack
    docker exec $COZY cozy-monitor update-all
    ;;


  update-all)
    _notice "Updating applications on all the Cozies..."
    sleep 3
    for CID in $(cozy-deploy list-domains)
    do
        docker exec $CID cozy-monitor update-cozy-stack
        docker exec $CID cozy-monitor update-all
    done
    ;;


  upgrade)
    if [ -z "$COZY" ]; then
        _alert "$INVALID_COZY_MSG"
        exit 1
    fi

    _notice "Upgrading system on $COZY"
    docker exec $COZY apt-get update --quiet
    docker exec $COZY apt-get upgrade --quiet -yy
    ;;


  upgrade-all)
    _notice "Upgrading the Cozies' systems"
    sleep 3
    for CID in $(cozy-deploy list-domains)
    do
        docker exec $CID apt-get update --quiet
        docker exec $CID apt-get upgrade --quiet -yy
    done
    ;;


  deploy|deploy-dev)
    if [ -z "$COZY" ]; then
        _alert "$INVALID_COZY_MSG"
        exit 1
    fi

    # Find a new port
    _notice " > Finding a free port"
    LAST_PORT=$(cat /etc/cozy-deploy/last-port-used 2>/dev/null || echo 49000)
    PORT=$((LAST_PORT+1))
    echo "$PORT" > /etc/cozy-deploy/last-port-used

    # Generate an SSL certificate
    _notice " > Generating the self-signed SSL certificate"
    openssl req -x509 -nodes -newkey rsa:2048 \
                 -keyout /etc/cozy-deploy/ssl/$COZY.key \
                 -out /etc/cozy-deploy/ssl/$COZY.crt \
                 -days 365 \
                 -subj "/CN=$COZY"
    chmod 600 /etc/cozy-deploy/ssl/$COZY.key

    # Write the VHost configuration
    _notice " > Writing Nginx configuration"
    cat <<EOF > /etc/cozy-deploy/vhosts/$COZY
server {
    listen 443;
    server_name $COZY;

    ssl_certificate /etc/cozy-deploy/ssl/$COZY.crt;
    ssl_certificate_key /etc/cozy-deploy/ssl/$COZY.key;
    ssl_dhparam /etc/cozy-deploy/ssl/dh2048.pem;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ALL:!aNULL:!eNULL:!LOW:!EXP:!RC4:!3DES:+HIGH:+MEDIUM;
    ssl_prefer_server_ciphers on;
    ssl on;

    gzip_vary on;
    client_max_body_size 1024M;

    add_header Strict-Transport-Security max-age=2678400;

    location / {
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header Host \$http_host;
        proxy_redirect http:// https://;
        proxy_pass http://127.0.0.1:$PORT;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    access_log /var/log/nginx/$COZY.log;
}
server {
    listen 80;
    server_name $COZY;
    return 301 https://\$host\$request_uri;
}
EOF
    # Reload Nginx (restart is not needed)
    service nginx reload 2>/dev/null \
    || _alert "Please reload nginx manually"

    # Fetch couchdb UID and create the shared volume
    _notice " > Creating shared volumes"
    COUCHDB_ID=$(docker run --rm=true cozy/full id -u couchdb)
    mkdir -p /var/cozy-deploy/databases/$COZY
    chown $COUCHDB_ID -hR /var/cozy-deploy/databases/$COZY

    # Deploy in development mode?
    if [ "$1" == "deploy-dev" ]; then
        DEV_MODE="-e NODE_ENV=development"
        PORT_COUCHDB="-p 5984:5984"
        PORT_CONTROLLER="-p 9002:9002"
        PORT_DS="-p 9101:9101"
        PORT_INDEXER="-p 9102:9102"
        PORT_HOME="-p 9103:9103"
        PORT_PROXY="-p 9104:9104"
        PORT_AXON="-p 9105:9105"
    fi

    # Run the container
    echo
    _notice " > Running the container:"
    set -x
    docker run -d \
               -p $PORT:80 \
               $PORT_COUCHDB $PORT_CONTROLLER $PORT_DS $PORT_INDEXER $PORT_HOME $PORT_PROXY $PORT_AXON \
               -e DISABLE_SSL=true $DEV_MODE \
               -v /var/cozy-deploy/databases/$COZY:/var/lib/couchdb \
               -v /var/cozy-deploy/configurations/$COZY:/etc/cozy \
               -v /var/cozy-deploy/apps/$COZY:/usr/local/cozy/apps \
               -v /var/cozy-deploy/modules:/usr/local/lib/node_shared_modules \
               --name $COZY \
               cozy/full 2>&1

    # Add a PageKite Host
    if [[ $COZY =~ ^.*\.pagekite\.me$ ]] && [[ $PAGEKITE = "true" ]]; then

        # Hide PageKite CLI and answer "Yes" automatically
        pagekite.py --add $PORT $COZY >/dev/null <<-EOF
Y
EOF
        echo
        _notice " > Restarting PageKite"
        cozy-deploy restart-pagekite > /dev/null
    fi

    _notice " > Waiting for your Cozy to be up and running..."
    sleep 10
    while ! cozy-deploy status $COZY > /dev/null 2>&1 ; do sleep 5; done

    _success "
Your new Cozy is now deployed.
If your DNS is properly set up, it will be accessible at https://$COZY in a few second.
"
    ;;


  remove|rm)
    if [ -z "$COZY" ]; then
        _alert "$INVALID_COZY_MSG"
        exit 1
    fi
    echo
    read -e -p "/!\ You are about to remove $COZY, its data and its configuration. Are you sure? [N/y] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -f /etc/cozy-deploy/vhosts/$COZY
        rm -f /etc/cozy-deploy/ssl/$COZY.{key,crt}
        rm -f /var/log/nginx/$COZY.log*
        rm -rf /var/cozy-deploy/databases/$COZY
        rm -rf /var/cozy-deploy/configurations/$COZY
        rm -rf /var/cozy-deploy/apps/$COZY
        if [[ $COZY =~ ^.*\.pagekite\.me$ ]] && [[ $PAGEKITE = "true" ]]; then
            sed -i "/http:$COZY/d" ~/.pagekite.rc
            cozy-deploy restart-pagekite
        fi
        docker kill $COZY > /dev/null || echo "No container to stop" 1>&2
        docker rm $COZY > /dev/null || echo "No container to remove" 1>&2

        # Reload Nginx (restart is not needed)
        service nginx reload 2>/dev/null \
        || _alert "Please reload nginx manually"
        echo

        _success "$COZY successfully removed"
    fi
    ;;


  enter)
    if [ -z "$COZY" ] || [ "$COZY_EXISTS" == "false" ]; then
        _alert "$INVALID_COZY_MSG"
        exit 1
    fi

    _notice "Opening a shell in $COZY..."
    sleep 1
    docker exec -ti $COZY bash
    ;;


  status)
    if [ -z "$COZY" ]; then
        for COZY in $(cozy-deploy list-domains)
        do
            cozy-deploy status $COZY
        done
    elif [ "$COZY_EXISTS" == "false" ]; then
        _alert "$INVALID_COZY_MSG"
        exit 1
    fi

    _notice "$COZY"
    docker exec $COZY cozy-monitor status
    echo
    ;;


  logs|log)
    if [ -z "$COZY" ] || [ "$COZY_EXISTS" == "false" ]; then
        _alert "$INVALID_COZY_MSG"
        exit 1
    fi

    docker exec $COZY bash -c "tail -f /usr/local/var/log/cozy/*.log"
    echo
    docker exec $COZY bash -c "tail -f /var/log/supervisor/*-stdout*.log"
    ;;


  list|ls)
    printf "%35s    %7s    %5s\n" "DOMAIN" "RUNNING" "PORT"
    for NAME in $(cozy-deploy list-domains)
    do
        RUNNING=$(docker inspect --format '{{.State.Running}}' $NAME)
        PORT=$(docker inspect --format '{{.HostConfig.PortBindings}}' $NAME \
             | sed 's/^.*HostPort://' \
             | sed 's/...$//' \
             | sed 's/HostIp://')
        if [ "$RUNNING" == "true" ]; then
            printf "%35s    ${green}%7s${white}    %5s\n" "$NAME" "$RUNNING" "$PORT"
        else
            printf "%35s    ${red}%7s${white}    %5s\n" "$NAME" "$RUNNING" "$PORT"
        fi
    done
    ;;


  list-domains)
    docker ps -a -q \
              --filter "image=cozy/*" \
              --filter "name=.*\..*" \
    | xargs docker inspect --format '{{.Name}}' 2> /dev/null \
    | sed 's/^.//' \
    || echo ""
    ;;


  start-all)
    _notice "Starting all the Cozies"
    docker ps -a \
              --filter "image=cozy/*" \
              --filter "name=.*\..*" \
              --filter "status=exited*" -q \
    | xargs docker start \
    || echo "No more Cozy to start" 1>&2
    ;;


  monitor|mon)
    if [ -z "$COZY" ] || [ "$COZY_EXISTS" == "false" ]; then
        docker stats $(docker ps -q)
    else
        docker stats $COZY
    fi
    ;;


  commands)
    cozy-deploy help | awk '{print $1}' | grep -v ':'
    ;;


  *)
    echo
    echo "Usage: cozy-deploy COMMAND [domain]"
    echo ""
    echo "Options:"

    cat<<EOF
    help                          Print the list of commands
    init                          Initialize Nginx proxy configuration in /etc/nginx/conf.d/cozy-deploy.conf
    init-pagekite                 Initialize PageKite configuration in /root/.pagekite.rc
    restart-pagekite              Restart PageKite daemon
    pull                          Fetch the latest cozy/full official image from Docker Hub
    build                         Build a cozy/full image manually from the GitHub repository https://github.com/cozy-labs/cozy-docker
    update-image                  Update cozy-deploy and the base image

    list                          List deployed Cozies
    list-domains                  Only list domain names associated with actual Cozies
    start-all                     Start all previously stopped Cozies
    update-all                    Launch application updates on all the Cozies
    upgrade-all                   Launch a system upgrade on all the Cozies
    monitor                       Monitor resources used by the Cozies or by a specific Cozy

    deploy     <domain>           Deploy a new Cozy container
    deploy-dev <domain>           Deploy a new Cozy container with NODE_ENV=development and all the port forwarded to the host
    remove     <domain>           Remove a Cozy, its data and its configuration
    enter      <domain>           Open a shell in the specified Cozy
    status     <domain>           Show the status of the Cozy's services
    logs       <domain>           Display the last lines of interesting log files in the specified Cozy
    update     <domain>           Launch application updates on a Cozy
    upgrade    <domain>           Launch a system upgrade on a Cozy
EOF
    ;;
esac
